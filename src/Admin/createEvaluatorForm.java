/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import Error.ErrorPage;
import config.Session;
import config.dbConnector;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author Chris
 */
public class createEvaluatorForm extends javax.swing.JFrame {

    /**
     * Creates new form createUserForm
     */
    public createEvaluatorForm() {
        initComponents();
        loadEvaluators();
        loadDepartment();
        
    }
    
    
    private HashMap<String, Integer> evaluatorMap = new HashMap<>();
    private HashMap<String, Integer> departmentMap = new HashMap<>();  
    
    public void loadDepartment(){
        dbConnector db = new dbConnector();
        try {
            String query = "SELECT dep_id, dep_name FROM tbl_department ORDER BY dep_name";
            ResultSet rs = db.getData(query);

            department.removeAllItems();
            departmentMap.clear(); 
            department.addItem("Please Select Department");
            boolean hasDepartment = false;

            while (rs.next()) {
                    hasDepartment = true;
                    int depId = rs.getInt("dep_id");
                    String depName = rs.getString("dep_name");
                    department.addItem(depName);
                    departmentMap.put(depName, depId);
            }

            if (!hasDepartment) {
                JOptionPane.showMessageDialog(this,"No department available. Do you want to proceed anyway?", "No Department Found", JOptionPane.INFORMATION_MESSAGE);
                department.addItem("N/A");
            }

            department.revalidate();
            department.repaint();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading department: " + e.getMessage());
        }
    }
    
    private void loadEvaluators() {
        try {
            dbConnector db = new dbConnector();

            String query = "SELECT u_id, u_fname, u_lname, u_image FROM tbl_admin WHERE u_type = 'Evaluator' ORDER BY u_fname";
            ResultSet rs = db.getData(query);

            eval.removeAllItems();
            evaluatorMap.clear();

            eval.addItem("Please Select Evaluator");

            // Query to get all employees already in tbl_employee (assigned to a department)
            String alreadyAssignedQuery = "SELECT eval_userid FROM tbl_evaluator";
            Set<Integer> assignedUserIds = new HashSet<>();
            ResultSet assignedRs = db.getData(alreadyAssignedQuery);
            while (assignedRs.next()) {
                assignedUserIds.add(assignedRs.getInt("eval_userid"));
            }

            boolean hasEmployees = false;
            while (rs.next()) {
                hasEmployees = true;
                int userId = rs.getInt("u_id");

                
                if (!assignedUserIds.contains(userId)) {
                    String fullName = rs.getString("u_fname") + " " + rs.getString("u_lname");
                    eval.addItem(fullName);
                    evaluatorMap.put(fullName, userId);
                }
            }

            if (!hasEmployees) {
                eval.addItem("N/A");
                JOptionPane.showMessageDialog(this,
                        "No evaluators available. Please create a user with evaluator type first.",
                        "No Evaluators Found",
                        JOptionPane.WARNING_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading evaluators: " + e.getMessage());
        }
    }
    
    Color bodycolor = new Color(0,204,204);
    Color nav = new  Color(0,153,204);
    Color bodycolor1 = new Color(255,51,51);
    Color nav1 = new  Color(255,102,102);
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        eval = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        pst = new javax.swing.JTextField();
        cnl = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        crt = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        department = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        evl = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(241, 242, 247));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(1, 216, 218));
        jPanel3.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 20));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add-friend_12391319.png"))); // NOI18N
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Create New Evaluator");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 200, 40));

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Select Evaluator");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 100, 30));

        eval.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        eval.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select Evaluator" }));
        eval.setBorder(null);
        eval.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evalActionPerformed(evt);
            }
        });
        jPanel3.add(eval, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 220, 44));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Position");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 100, 30));

        pst.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pst.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pst.setBorder(null);
        pst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pstActionPerformed(evt);
            }
        });
        jPanel3.add(pst, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 220, 44));

        cnl.setBackground(new java.awt.Color(255, 51, 51));
        cnl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cnl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cnlMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cnlMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cnlMouseExited(evt);
            }
        });
        cnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Cancel");
        cnl.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 100, 20));

        jPanel3.add(cnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 180, 40));

        crt.setBackground(new java.awt.Color(0, 204, 204));
        crt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        crt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                crtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                crtMouseExited(evt);
            }
        });
        crt.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Create");
        crt.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 100, 20));

        jPanel3.add(crt, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 370, 180, 40));

        department.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        department.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select Department" }));
        department.setBorder(null);
        department.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        department.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentActionPerformed(evt);
            }
        });
        jPanel3.add(department, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 210, 220, 44));

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Department From");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, 110, 30));

        evl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        evl.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        evl.setBorder(null);
        evl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evlActionPerformed(evt);
            }
        });
        jPanel3.add(evl, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 300, 220, 44));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Evaluation Acces Level");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 270, 140, 30));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 440));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
    Session sess = Session.getInstance();
        if(sess.getUid() == 0){
            ErrorPage ep = new ErrorPage();
            ep.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_formWindowActivated

    private void evalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evalActionPerformed

    private void pstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pstActionPerformed

    private void cnlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cnlMouseClicked
        evaluatorForm ef = new evaluatorForm();
        ef.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cnlMouseClicked

    private void cnlMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cnlMouseEntered
        cnl.setBackground(nav1);
    }//GEN-LAST:event_cnlMouseEntered

    private void cnlMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cnlMouseExited
        cnl.setBackground(bodycolor1);
    }//GEN-LAST:event_cnlMouseExited

    private void crtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crtMouseClicked
        String position = pst.getText();
        String accesslvl = evl.getText();
        String selectedEvaluator = eval.getSelectedItem().toString();
        String selectedDepartment = department.getSelectedItem().toString();

        if (position.isEmpty() || accesslvl.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Position and Access level field are required!", "Error", JOptionPane.ERROR_MESSAGE);
        }else if ("Please Select Evaluator".equals(selectedEvaluator) || "N/A".equals(selectedEvaluator)) {
            JOptionPane.showMessageDialog(this, "Please select a valid evauator", "Error", JOptionPane.ERROR_MESSAGE);
        }else if ("Please Select Department".equals(selectedDepartment) || "N/A".equals(selectedDepartment)) {
            JOptionPane.showMessageDialog(this, "Please select a valid department", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            dbConnector db = new dbConnector();
            Integer userId = evaluatorMap.get(selectedEvaluator);
            Integer depId = departmentMap.get(selectedDepartment);

            String capacityQuery = "SELECT dep_totalemp, "
            + "(SELECT COUNT(*) FROM tbl_evaluator WHERE eval_depid = ?) AS current_evaluator "
            + "FROM tbl_department WHERE dep_id = ?";

            try (PreparedStatement pstmt = db.connect.prepareStatement(capacityQuery)) {
                pstmt.setInt(1, depId);
                pstmt.setInt(2, depId);

                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    int maxCapacity = rs.getInt("dep_totalemp");
                    int currentEvaluator = rs.getInt("current_evaluator");

                    if (currentEvaluator >= maxCapacity) {
                        JOptionPane.showMessageDialog(this,
                            "Cannot add evaluator - department is full! (Current: " + currentEvaluator +
                            "/Max: " + maxCapacity + ")",
                            "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            } catch (SQLException ex) {
                System.out.println(""+ex);
            }

            if(db.InsertData("INSERT INTO tbl_evaluator (eval_userid, eval_depid, eval_position, eval_accesslvl)"
                + "VALUES ('"+userId+"', '"+depId+"', '"+pst.getText()+"', '"+evl.getText()+"')") == 1){
            Session sess = Session.getInstance();
            db.logActivity(sess.getUid(), "Created a new Evaluator: " + userId);
            JOptionPane.showMessageDialog(this, "Added New Evaluator Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            evaluatorForm ef = new evaluatorForm();
            ef.setVisible(true);
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
        }
    }//GEN-LAST:event_crtMouseClicked

    private void crtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crtMouseEntered
        crt.setBackground(nav);
    }//GEN-LAST:event_crtMouseEntered

    private void crtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crtMouseExited
        crt.setBackground(bodycolor);
    }//GEN-LAST:event_crtMouseExited

    private void departmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_departmentActionPerformed

    private void evlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evlActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(createEvaluatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(createEvaluatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(createEvaluatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(createEvaluatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createEvaluatorForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cnl;
    public javax.swing.JPanel crt;
    public javax.swing.JComboBox<String> department;
    public javax.swing.JComboBox<String> eval;
    public javax.swing.JTextField evl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public javax.swing.JTextField pst;
    // End of variables declaration//GEN-END:variables
}
